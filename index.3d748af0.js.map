{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,U,C,I,I,E,I,K,E,W,C,E,a,C,C,GC+DA,IAAA,EA3DA,MACE,aAAa,CACX,IAAI,CAAC,cAAc,CAAG,CACpB,oBAAqB,EACrB,qBAAsB,EACtB,qBAAsB,EACtB,sBAAuB,EACvB,wBAAyB,EACzB,yBAA0B,CAC5B,EAGE,IAAI,CAAC,wBAAwB,EACjC,CAEA,MAAM,yBAAyB,EAAS,IAAK,CAAC,CAE5C,IAAI,CAAC,eAAe,GACpB,YAAY,KACV,IAAI,CAAC,eAAe,EACtB,EAAE,EACJ,CAEA,MAAM,iBAAkB,CACtB,IAAM,EAAY,IAAI,OAAO,OAAO,GAChC,EAAM,CAAC,kGAAkG,EAAE,EAAU,CAAC,CAE1H,GAAG,CAED,IAAI,EAAW,MAAM,MAAM,GAmB3B,MAjBA,AADW,CAAA,MAAM,EAAS,IAAI,EAA9B,EACK,OAAO,CAAC,AAAC,IAET,AAA8B,QAA9B,EAAK,MAAM,CAAC,WAAW,IACxB,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAClF,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAG,EAAK,aAAa,EAErD,AAA8B,QAA9B,EAAK,MAAM,CAAC,WAAW,IAC9B,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAG,IAAI,CAAC,cAAc,CAAC,oBAAoB,CACpF,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAG,EAAK,aAAa,EAExB,QAA9B,EAAK,MAAM,CAAC,WAAW,KAC9B,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAG,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAC1F,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAG,EAAK,aAAa,CAGpE,GAEO,CAAA,CACT,CAAC,MAAM,EAAM,CACX,MAAO,CAAA,CACT,CAEF,CAKF,C,G,E","sources":["<anon>","src/Model.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7h9SY\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $54c1ca03d46de555$export$2e2bcd8739ae039);\n\"use strict\";\nclass $54c1ca03d46de555$var$Model {\n    constructor(){\n        this.fetchedAPIData = {\n            bitCoinCurrentPrice: 0,\n            bitCoinPreviousPrice: 0,\n            ethereumCurrentPrice: 0,\n            ethereumPreviousPrice: 0,\n            BinanceCoinCurrentPrice: 0,\n            BinanceCoinPreviousPrice: 0\n        };\n        // console.log(this.fetchCryptoData());\n        this.requestDataEveryNSeconds();\n    }\n    async requestDataEveryNSeconds(nSeconds = 15000) {\n        // initially calling once\n        this.fetchCryptoData();\n        setInterval(()=>{\n            this.fetchCryptoData();\n        }, nSeconds);\n    }\n    async fetchCryptoData() {\n        const timestamp = new Date().getTime(); // Generate a timestamp to use as a cache buster\n        let url = `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum,binancecoin&_=${timestamp}`;\n        try {\n            // console.log(this);\n            let response = await fetch(url);\n            let data = await response.json();\n            data.forEach((coin)=>{\n                // console.log(coin);\n                if (coin.symbol.toLowerCase() === \"btc\") {\n                    this.fetchedAPIData.bitCoinPreviousPrice = this.fetchedAPIData.bitCoinCurrentPrice;\n                    this.fetchedAPIData.bitCoinCurrentPrice = coin.current_price;\n                } else if (coin.symbol.toLowerCase() === \"eth\") {\n                    this.fetchedAPIData.ethereumPreviousPrice = this.fetchedAPIData.ethereumCurrentPrice;\n                    this.fetchedAPIData.ethereumCurrentPrice = coin.current_price;\n                } else if (coin.symbol.toLowerCase() === \"bnb\") {\n                    this.fetchedAPIData.BinanceCoinPreviousPrice = this.fetchedAPIData.BinanceCoinCurrentPrice;\n                    this.fetchedAPIData.BinanceCoinCurrentPrice = coin.current_price;\n                }\n            });\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n}\nvar $54c1ca03d46de555$export$2e2bcd8739ae039 = $54c1ca03d46de555$var$Model;\n\n});\n\n\nparcelRequire(\"7h9SY\");\n\n//# sourceMappingURL=index.3d748af0.js.map\n","'use strict';\r\n\r\n\r\n\r\nclass Model{\r\n  constructor(){    \r\n    this.fetchedAPIData = {\r\n      bitCoinCurrentPrice: 0,\r\n      bitCoinPreviousPrice: 0,\r\n      ethereumCurrentPrice: 0,\r\n      ethereumPreviousPrice: 0,\r\n      BinanceCoinCurrentPrice: 0,\r\n      BinanceCoinPreviousPrice: 0\r\n    };\r\n    \r\n    // console.log(this.fetchCryptoData());\r\n      this.requestDataEveryNSeconds();\r\n  }  \r\n\r\n  async requestDataEveryNSeconds(nSeconds=15000){\r\n    // initially calling once\r\n    this.fetchCryptoData();\r\n    setInterval(()=>{\r\n      this.fetchCryptoData();\r\n    },nSeconds);\r\n  }\r\n\r\n  async fetchCryptoData() {\r\n    const timestamp = new Date().getTime(); // Generate a timestamp to use as a cache buster\r\n    let url = `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum,binancecoin&_=${timestamp}`;\r\n\r\n    try{\r\n      // console.log(this);\r\n      let response = await fetch(url);\r\n      let data = await response.json();\r\n      data.forEach((coin)=>{\r\n        // console.log(coin);\r\n        if(coin.symbol.toLowerCase() === 'btc'){\r\n          this.fetchedAPIData.bitCoinPreviousPrice = this.fetchedAPIData.bitCoinCurrentPrice;\r\n          this.fetchedAPIData.bitCoinCurrentPrice = coin.current_price;\r\n\r\n        }else if(coin.symbol.toLowerCase() === 'eth'){\r\n          this.fetchedAPIData.ethereumPreviousPrice = this.fetchedAPIData.ethereumCurrentPrice;\r\n          this.fetchedAPIData.ethereumCurrentPrice = coin.current_price;\r\n          \r\n        }else if(coin.symbol.toLowerCase() === 'bnb'){\r\n          this.fetchedAPIData.BinanceCoinPreviousPrice = this.fetchedAPIData.BinanceCoinCurrentPrice;\r\n          this.fetchedAPIData.BinanceCoinCurrentPrice = coin.current_price;\r\n    \r\n        }\r\n      });\r\n\r\n      return true;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n\r\n  }\r\n  \r\n\r\n\r\n\r\n}\r\nexport default Model;"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$54c1ca03d46de555$export$2e2bcd8739ae039","set","s","enumerable","configurable","constructor","fetchedAPIData","bitCoinCurrentPrice","bitCoinPreviousPrice","ethereumCurrentPrice","ethereumPreviousPrice","BinanceCoinCurrentPrice","BinanceCoinPreviousPrice","requestDataEveryNSeconds","nSeconds","fetchCryptoData","setInterval","timestamp","Date","getTime","url","response","fetch","data","json","forEach","coin","symbol","toLowerCase","current_price","error"],"version":3,"file":"index.3d748af0.js.map"}